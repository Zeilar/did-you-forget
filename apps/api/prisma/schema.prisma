generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DB_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String // Is obviously encrypted, using bcrypt.
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notifications Notification[]
  sessions Session[]
  pendingVerification PendingVerification?
  pendingPasswordReset PendingPasswordReset?
}

model Notification {
  id String @id @default(uuid())
  title String
  time DateTime
  repeat Int[] // Unique ints ranging 0-6, each number representing the day's index of the week. Unsorted.
  reminders String[] // How many seconds prior to the `time` the reminder should fire.
  email Boolean? // Whether to send an email to the user's registered address.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
}

model Session {
  id String @id @default(uuid())
  expires DateTime
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
}

model PendingVerification {
  id String @id @default(uuid())
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

model PendingPasswordReset {
  id String @id @default(uuid())
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}